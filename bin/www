#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('tuxin-skeleton-nodejs-backend:server');
const https = require('https');
const config = require('../model/config');
const path = require('path');
const fs = require('fs');

/**
 * Get port from environment and store in Express.
 */
const port = config.web_server.https_port;
app.set('port', port);

/**
 * Create HTTP server.
 */

const options = {
    key: fs.readFileSync(path.join(__dirname,'..',config.certs.ssl_key)),
    ca: [fs.readFileSync(path.join(__dirname,'..',config.certs.ssl_bundle))],
    cert: fs.readFileSync(path.join(__dirname,'..',config.certs.ssl_certificate))
};

var server = https.createServer(options,app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
